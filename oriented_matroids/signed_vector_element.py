r"""
Signed vector element for vector based oriented matroids.

---------------------------------------

This implements an oriented matroid element. Depending on the implementation
this can either be seen as a signed vector or covector.

AUTHORS:

- Aram Dermenjian (2019-07-12): Initial version
"""

##############################################################################
#       Copyright (C) 2019 Aram Dermenjian <aram.dermenjian at gmail.com>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#
#  The full text of the GPL is available at:
#
#                  http://www.gnu.org/licenses/
##############################################################################
from oriented_matroids.signed_subset_element import SignedSubsetElement


class SignedVectorElement(SignedSubsetElement):
    r"""
    Creates an oriented matroid element.

    INPUT:

    - ``parent`` -- the parent object of the element. Usually is a class
       generated by :class:`OrientedMatroid`.
    - ``data`` -- (default: ``None``) is a tuple with information. Can be
       given in one of the following formats:
        + **as a vector** -- this is a tuple of pluses, minuses, and zeroes.
        + **as three tuples** -- the first tuple is the positives, the second
          the negatives and the third the zeroes.
        + **as a dict** -- the dictionary should have keys *positives*,
          *negatives*, and *zeroes*.

    - ``groundset`` -- (default: ``None``) if not given will construct
       the groundset from the parent, or if none is created in the parent,
       using the elements found in the data.
    - ``positives`` -- (default: ``None``) alternative to ``data``. Should be
       a tuple of elements. Requires ``negatives`` to be set.
    - ``negatives`` -- (default: ``None``) alternative to ``data``. Should be
       a tuple of elements. Requires ``positives`` to be set.
    - ``zeroes`` -- (default: ``None``) alternative to ``data``. Should be a
       tuple of elements. Requires ``positives`` and ``negatives`` to be set.

    EXAMPLES::

        sage: from oriented_matroids import OrientedMatroid
        sage: from oriented_matroids.signed_vector_element import SignedVectorElement

        sage: C = [ [1,1,1], [1,1,0],[1,1,-1],[1,0,-1],[1,-1,-1],[0,-1,-1],
        ....: [-1,-1,-1],[0,1,1],[-1,1,1],[-1,0,1],[-1,-1,1],[-1,-1,0],[0,0,0]]
        sage: M = OrientedMatroid(C, key='covector')
        sage: SignedVectorElement(M,data = (0,-1,1))
        (0,-1,1)
        sage: SignedVectorElement(M,data = (1,1,-1))
        (1,1,-1)
        sage: M = OrientedMatroid(C, key='covector',groundset=['e','f','g'])
        sage: SignedVectorElement(M,data = (1,-1,0))
        (1,-1,0)

    .. SEEALSO::

        - :class:`oriented_matroids.oriented_matroid.OrientedMatroid`
        - :class:`oriented_matroids.oriented_matroids_category.OrientedMatroids`
        - :class:`oriented_matroids.signed_subset_element.SignedSubsetElement`

    """

    def __init__(self, parent=None, data=None, groundset=None,
                 positives=None, negatives=None, zeroes=None):
        """
        Initialize ``self``.
        """

        SignedSubsetElement.__init__(
            self, parent, data, groundset, positives, negatives, zeroes)

    def _repr_(self):
        """
        Return a representation depending on implementation.

        EXAMPLES::

            sage: from oriented_matroids import OrientedMatroid
            sage: from oriented_matroids.signed_vector_element import SignedVectorElement

            sage: C = [ [1,1,1], [1,1,0],[1,1,-1],[1,0,-1],[1,-1,-1],[0,-1,-1],
            ....: [-1,-1,-1],[0,1,1],[-1,1,1],[-1,0,1],[-1,-1,1],[-1,-1,0],
            ....: [0,0,0]]
            sage: M = OrientedMatroid(C, key='covector')
            sage: SignedVectorElement(M,data = (1,1,-1))
            (1,1,-1)

        """
        return "(" + ','.join([str(self(e)) for e in self.groundset()]) + ")"

    def _latex_(self):
        r"""
        Return a latex representation depending on implementation.

        EXAMPLES::

            sage: from oriented_matroids import OrientedMatroid
            sage: from oriented_matroids.signed_vector_element import SignedVectorElement
            sage: C = [ [1,1,1], [1,1,0],[1,1,-1],[1,0,-1],[1,-1,-1],[0,-1,-1],
            ....: [-1,-1,-1],[0,1,1],[-1,1,1],[-1,0,1],[-1,-1,1],[-1,-1,0],
            ....: [0,0,0]]
            sage: M = OrientedMatroid(C, key='covector')
            sage: latex(SignedVectorElement(M,data = (1,1,-1)))
            \left(1,1,-1\right)

        """
        ground_set = [str(self(e)) for e in self.groundset()]
        return "\\left(" + ','.join(ground_set) + "\\right)"
